import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useEffect, useRef, useState } from 'react'
import axios from 'axios'


export default function Home() {

  const apiKey = process.env.NEXT_PUBLIC_API;
  const location = 'Vancouver';
  const units = 'metric';
  const url = `https://api.openweathermap.org/data/2.5/forecast?q=${location}&units=${units}&appid=${apiKey}`;

  const [data, setData] = useState();
  const grabWeather = useRef(false);

  const fetchWeather = async () => {
    const response = await axios.get(url);
    console.log(response);

    console.log(response.data.list);
    const arrayOfDays = [];

    let weatherData = response.data.list.map((weather, index) => {
      console.log(parseInt(weather.dt_txt.substr(8, 2), 10))
      let num = parseInt(weather.dt_txt.substr(8, 2), 10)

      if (num !== arrayOfDays.find(element => element === num)) {
        arrayOfDays.push(num);
        console.log("here")
        console.log(response.data.list[index]);

        var month = '';
        var icon = '';

        if (weather.dt_txt.substr(5, 2) == 1) {
          month = 'Jan';
        } else if (weather.dt_txt.substr(5, 2) == 2) {
          month = 'Feb';
        } else if (weather.dt_txt.substr(5, 2) == 3) {
          month = 'Mar';
        } else if (weather.dt_txt.substr(5, 2) == 4) {
          month = 'April';
        } else if (weather.dt_txt.substr(5, 2) == 5) {
          month = 'May';
        } else if (weather.dt_txt.substr(5, 2) == 6) {
          month = 'June';
        } else if (weather.dt_txt.substr(5, 2) == 7) {
          month = 'July';
        } else if (weather.dt_txt.substr(5, 2) == 8) {
          month = 'Aug';
        } else if (weather.dt_txt.substr(5, 2) == 9) {
          month = 'Sept';
        } else if (weather.dt_txt.substr(5, 2) == 10) {
          month = 'Oct';
        } else if (weather.dt_txt.substr(5, 2) == 11) {
          month = 'Nov';
        } else if (weather.dt_txt.substr(5, 2) == 12) {
          month = 'Dec';
        }

        if (weather.weather[0].main == 'Clouds') {
          icon = '/icons/broken-clouds.png';
        } else if (weather.weather[0].main == 'Clear') {
          icon = '/icons/clear-sky.png';
        } else if (weather.weather[0].main == 'Atmosphere') {
          icon = '/icons/mist.png';
        } else if (weather.weather[0].main == 'Rain') {
          icon = '/icons/rain.png';
        } else if (weather.weather[0].main == 'Drizzle') {
          icon = '/icons/shower-rain.png';
        } else if (weather.weather[0].main == 'Snow') {
          icon = '/icons/snow.png';
        } else if (weather.weather[0].main == 'Thunderstorm') {
          icon = '/icons/thunderstorm.png';
        }

        var now = new Date(weather.dt_txt);
        var days = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];
        var day = days[now.getDay()];

        return (
          <div key={index} className={styles.weatherCont}>
            <p className={styles.weekday}>{day} </p>
            <p className={styles.month}> {month} {weather.dt_txt.substr(8, 2)}, {weather.dt_txt.substr(0, 4)}</p>
            <div key={index}>
              <Image
                className={styles.icon}
                src={icon}
                alt={icon}
                width={60}
                height={50}
                priority
              />
              <div className={styles.degreeCont}>
                <p className={styles.degree}>{weather.main.temp.toFixed(1)} </p>
                <p className={styles.celsius}> Â°C</p>
              </div>
              <p className={styles.weather}>{weather.weather[0].main}</p>
            </div>
          </div>
        )
      }
    })
    console.log(arrayOfDays);
    setData(weatherData);
  }

  useEffect(() => {
    if (grabWeather.current === true) {
      fetchWeather();
    }

    return () => {
      grabWeather.current = true;
    }
  }, []);

  const current = new Date();
  const date = `${current.getDate()}/${current.getMonth() + 1}/${current.getFullYear()}`;
  return (
    <>
      <Head>
        <title>Just Weather</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <main className={styles.main}>

        <Image
          className={styles.logo}
          src="/weather-forecast-logo.png"
          alt="weather-forecast-logo"
          width={200}
          height={140}
          priority
        />
        <p className={styles.lastUpdated}>
          Last updated: {date}
        </p>

        <div className={styles.data}>
          {data}
        </div>
        <p className={styles.footer}>
          By William Chu
        </p>
      </main>
    </>
  )
}
